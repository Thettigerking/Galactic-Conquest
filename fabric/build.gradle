plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    compileOnlyApi 'org.joml:joml-primitives:1.10.0'
    compileOnlyApi 'org.joml:joml:1.10.4'

    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    modImplementation("net.fabricmc:fabric-language-kotlin:${rootProject.fabric_kotlin_version}+kotlin.${rootProject.kotlin_version}")

    implementation(include(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${rootProject.mixin_extras}")))

    // Valkyrien Skies 2
    modApi("org.valkyrienskies:valkyrienskies-120-fabric:${rootProject.vs2_version}") { transitive = false }

    // VS Core
    compileOnly("org.valkyrienskies.core:api:${rootProject.vs_core_version}")
    compileOnly("org.valkyrienskies.core:api-game:${rootProject.vs_core_version}")
    compileOnly("org.valkyrienskies.core:util:${rootProject.vs_core_version}")
    compileOnly("org.valkyrienskies.core:impl:${rootProject.vs_core_version}")

    modImplementation("com.lowdragmc.photon:photon-fabric-${rootProject.minecraft_version}:${rootProject.photon_version}") { transitive = false }
    modImplementation("com.lowdragmc.ldlib:ldlib-fabric-${rootProject.minecraft_version}:${rootProject.ldlib_version}") { transitive = false }

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
